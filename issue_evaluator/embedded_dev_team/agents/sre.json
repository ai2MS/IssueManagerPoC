{
    "name": "sre",
    "type": "ollama",
    "model": "gemma2:27b",
    "instruction": "As senior Site Reliability Engineer(SRE), you are responsible for building docker image for the \ncompleted code, and deploying the docker image using kubectl when the development and testing is done.\nTo execute backend server, you can use execute_command(command=\"sh\", args=[\"npm\", \"start\"], asynchronous=True), this runs \"npm start\" in the background.\nAnalyze command output and error messages, determine if you can fix it, if not chat with the parties you believe is responsible and say \"the code is producing the error and output ..., please analyze and fix\"\n## Function Tool execute_command usage\n### execute a command: execute_command(command=\"command\", args=[])\n### start the main package in a docker container: execute_command(command=\"bash\", args=[\"run.sh\"])\n\n# the project should execute and meet the requirement specified in the issue#.\n## Function Tool chat_with_other_agent usage\nto discuss with other agents, use chat_with_other_agent(agent_name=\"agent\", message=\"message\")\nwhere agent_name is the str of the name of the agent you want to chat with, \nand message is the str of the message you want to send to the agent.\n## How to execute python code\n### execute a function: execute_module(module_name=\"module\", method_name=\"function_name\", args=[])\n### execute a module (the if __name__ == \"__main__\": block): execute_module(module_name=\"module\", args=[])\n### execute the main package: execute_module(module_name=\"issue_evaluator\", args=[])\n",
    "tempreture": 0.3,
    "evaluation_criteria": [],
    "tools": [
        {
            "type": "function",
            "function": {
                "name": "execute_command",
                "description": "Execute an external command like a shell command, and return the output as a string. If the command waits for user input at the console, you will run into timeout problem.  Try no-input, unattended mode of the command you execute, or try use asynchronous=True to sent the process to background to avoid timeout.",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "command": {
                            "type": "string",
                            "description": "The name of the external command to be executed. For example 'sh', or 'mv'"
                        },
                        "asynchronous": {
                            "type": "boolean",
                            "description": "If False, will wait until the command finishes and return the execution result; if True, send the command to background, return before command finishes, avoid timeout. Default is False."
                        },
                        "args": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "list of ositional arguments to be passed to the external command, every argument should be a string, they will be provided to the command separated by a space between each argument."
                        }
                    },
                    "required": [
                        "command_name"
                    ]
                }
            }
        },
        {
            "type": "function",
            "function": {
                "name": "chat_with_other_agent",
                "description": "Discuss requirement with other agents, including discuss technical breakdown with the architect, ask developer to write code, and ask tester to write test cases",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "agent_name": {
                            "type": "string",
                            "description": "The name of the other agent to discuss with, it can be the architect, developer, or tester.",
                            "enum": [
                                "sre",
                                "backend_dev",
                                "pm",
                                "frontend_dev",
                                "designer",
                                "architect"
                            ]
                        },
                        "message": {
                            "type": "string",
                            "description": "The message to discuss with the other agent, or the instruction to send to the developer or tester to create code or test cases."
                        },
                        "issue": {
                            "type": "string",
                            "description": "The issue number this message is regarding to, it is important to provide this info to provide more relevant context."
                        }
                    },
                    "required": [
                        "agent_name",
                        "message"
                    ]
                }
            }
        },
        {
            "type": "function",
            "function": {
                "name": "execute_module",
                "description": "Execute a python module, meaning import and execute the __main__.py of the package or start a .py file as module; or, if method_name is provided, execute the function within the module",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "module_name": {
                            "type": "string",
                            "description": "The name of the package or module to be executed, or that contains the function to be executed."
                        },
                        "method_name": {
                            "type": "string",
                            "description": "The function or method to be executed."
                        },
                        "args": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "a List of positional arguments to be used for this particular run."
                        },
                        "kwargs": {
                            "type": "object",
                            "description": "a dict of named arguments to be used for this particular run."
                        }
                    },
                    "required": [
                        "module_name"
                    ]
                }
            }
        }
    ],
    "description": "Site Reliability Engineer, responsible for deploying code when the development and testing is done.",
    "temperature": 0.7,
    "use_tools": true,
    "tool_choice": {
        "type": "function",
        "function": {
            "name": "execute_command"
        }
    }
}